# Encrypting traffic between Kibana and Elasticsearch

# 1. Enabling TLS on the HTTP layer in Elasticsearch. 

# Generate a private key and X.509 certificate. 
sudo /usr/share/elasticsearch/bin/elasticsearch-certutil ca

#(3last1c)
p - elast1c

# By default the 'ca' mode produces a single PKCS#12 output file which holds:
#     * The CA certificate
#    * The CA's private key

# If you elect to generate PEM format certificates (the -pem option), then the output will
# be a zip file containing individual files for the CA certificate and private key

# Please enter the desired output file [elastic-stack-ca.p12]: 3last1c

# 2. Generate a certificate and private key for each node in your cluster
sudo /usr/share/elasticsearch/bin/elasticsearch-certutil cert --ca elast1c-stack-ca.p12


### /usr/share/elasticsearch/elast1c-stack-ca.p12    ### -location

Enter password for CA (elastic-stack-ca.p12) : elast1c
Please enter the desired output file [elastic-certificates.p12]: 
Enter password for elastic-certificates.p12 : elast1c
########
######## Certificates written to /usr/share/elasticsearch/elast1c-certificates.p12 ########
########
This file should be properly secured as it contains the private key for 
your instance.

This file is a self contained file and can be copied and used 'as is'
For each Elastic product that you wish to configure, you should copy
this '.p12' file to the relevant configuration directory
and then follow the SSL configuration instructions in the product guide.

For client applications, you may only need to copy the CA certificate and
configure the client to trust this certificate.

# After this:
sudo nano /etc/elasticsearch/elasticsearch.yml

#####################

xpack.security.transport.ssl.enabled: true
xpack.security.transport.ssl.verification_mode: certificate 
xpack.security.transport.ssl.keystore.path: /usr/share/elasticsearch/elastic-certificates.p12 
xpack.security.transport.ssl.truststore.path: /usr/share/elasticsearch/elastic-certificates.p12 


#

#/usr/share/elasticsearch/bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.elast1c

#/usr/share/elasticsearch/bin/elasticsearch-keystore add xpack.security.transport.ssl.truststore.elast1c

# OR
#bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.elast1c

#bin/elasticsearch-keystore add xpack.security.transport.ssl.truststore.elast1c

#

#/etc/elasticsearch/elasticsearch-keystore add xpack.security.transport.ssl.keystore.elast1c

#/etc/elasticsearch/elasticsearch-keystore add xpack.security.transport.ssl.truststore.elast1c

######################

#xpack.security.enabled: true


/var/log/elasticsearch/sk1f_cluster.log


sudo journalctl --unit elasticsearch --since  "2021-03-06 04:10:16"


sudo chown elasticsearch:elasticsearch /etc/elasticsearch/elast1c-certificates.p12


kibana.keystore:

DnrClCZG64YYWI3B07DF9VLiTER62DdClMHlrCRbsGqiD8Inpd7wGDbJ25Y4YjyomkoKpeAXuLDnEVK8wb0BAprJMQWxjh0OQYHMpPYnug+XSnXAoEt5hTAGbK7JeA==


# in kibana.yml :

elasticsearch.ssl.truststore.path: "/etc/elasticsearch/elast1c-certificates.p12"


#===================
#pt.2

in kibana.yml

xpack.lists.maxImportPayloadBytes: (default 9000000, maximum 100000000)
xpack.lists.importBufferSize:(default 1000).

curl -X GET "http://192.168.0.15:9200/_xpack/license" -u elastic:5f8pVLPOpYbQIKThygpY

# TRIAL
curl -X POST "http://192.168.0.15:9200/_license/start_trial?acknowledge=true&pretty" -u elastic:5f8pVLPOpYbQIKThygpY

{
  "acknowledged" : true,
  "trial_was_started" : true,
  "type" : "trial"
}

/usr/share/elasticsearch/bin/elasticsearch-certutil ca
elastic-stack-ca.p12

/usr/share/elasticsearch/bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12

Certificates written to /usr/share/elasticsearch/elastic-certificates.p12

cp /usr/share/elasticsearch/elastic-certificates.p12 /etc/elasticsearch/
chown root.elasticsearch /etc/elasticsearch/elastic-certificates.p12
chmod 660 /etc/elasticsearch/elastic-certificates.p12

/usr/share/elasticsearch/bin/elasticsearch-certutil http

The generated certificate will have the following additional configuration
values. These values have been selected based on a combination of the
information you have provided above and secure defaults. You should not need to
change these values unless you have specific requirements.
Key Name: 
Subject DN: CN=
Key Size: 2048

Zip file written to /usr/share/elasticsearch/elasticsearch-ssl-http.zip



# In elasticsearch.yml 
xpack.security.transport.ssl.enabled: true
xpack.security.transport.ssl.verification_mode: certificate
xpack.security.transport.ssl.keystore.path: elastic-certificates.p12
xpack.security.transport.ssl.truststore.path: elastic-certificates.p12
xpack.security.http.ssl.enabled: true
xpack.security.http.ssl.keystore.path: "http.p12"

## CA Generation Options

The generated certificate authority will have the following configuration values.
These values have been selected based on secure defaults.
You should not need to change these values unless you have specific requirements.

Subject DN: CN=Elasticsearch HTTP CA
Validity: 5y
Key Size: 2048

Key Name: elasticsearch
Subject DN: CN=elasticsearch
Key Size: 2048

Zip file written to /usr/share/elasticsearch/elasticsearch-ssl-http.zip

cd /usr/share/elasticsearch
unzip elasticsearch-ssl-http.zip
cp /usr/share/elasticsearch/elasticsearch/http.p12 /etc/elasticsearch/ #
chown root.elasticsearch /etc/elasticsearch/http.p12
chmod 660 /etc/elasticsearch/http.p12

systemctl start elasticsearch

curl --user elastic --insecure -X GET "https://192.168.0.15:9200/?pretty"

#setting kibana

cp /usr/share/elasticsearch/kibana/elasticsearch-ca.pem /etc/kibana/

sudo nano /etc/kibana/kibana.yml

elasticsearch.ssl.certificateAuthorities: [ "/etc/kibana/elasticsearch-ca.pem" ]
elasticsearch.ssl.verificationMode: none

curl --cacert /etc/kibana/elasticsearch-ca.pem https://localhost:9200/ -u elastic:5f8pVLPOpYbQIKThygpY -v 

curl --cacert /etc/kibana/elasticsearch-ca.pem https://192.168.0.15:9200/ -u elastic:5f8pVLPOpYbQIKThygpY -v


/usr/share/elasticsearch/kibana/elasticsearch-ca.pem
* SSL: certificate subject name 'elasticsearch' does not match target host name 'localhost'

curl --user elastic:5f8pVLPOpYbQIKThygpY --insecure -X GET "https://192.168.0.15:9200/?pretty"

#this
curl --insecure -X GET "https://192.168.0.15:9200/?pretty" -u elastic:5f8pVLPOpYbQIKThygpY

curl --cacert /etc/kibana/elasticsearch-ca.pem https://192.168.0.15:9200/ -u elastic:5f8pVLPOpYbQIKThygpY -v

ZWxhc3RpYzo1ZjhwVkxQT3BZYlFJS1RoeWdwWQ==

xpack.encryptedSavedObjects.encryptionKey: 'ZWxhc3RpYzo1ZjhwVkxQT3BZYlFJS1RoeWdwWQ=='

#=========================================================================================#

# adding to metricbeat

output.elasticsearch.hosts: ["https://192.168.0.15:9200"]
output.elasticsearch.ssl.certificate_authorities: ["/etc/pki/root/ca.pem"]
output.elasticsearch.ssl.certificate: "/etc/pki/client/cert.pem"
output.elasticsearch.ssl.key: "/etc/pki/client/cert.key"

#this one
output.elasticsearch.ssl.certificate_authorities: [ "/etc/kibana/elasticsearch-ca.pem" ]
output.elasticsearch.ssl.verificationMode: none
output.elasticsearch.ssl.keystore.path: /etc/elasticsearch/elastic-certificates.p12
output.elasticsearch.ssl.truststore.path: /etc/elasticsearch/elastic-certificates.p12
output.elasticsearch.http.ssl.enabled: true
output.elasticsearch.transport.ssl.enabled: true

xpack.security.transport.ssl.enabled: true
xpack.security.transport.ssl.verification_mode: certificate
xpack.security.transport.ssl.keystore.path: elastic-certificates.p12
xpack.security.transport.ssl.truststore.path: elastic-certificates.p12
xpack.security.http.ssl.enabled: true
xpack.security.http.ssl.keystore.path: "http.p12"

#for kibana
setup.kibana.host: "https://192.168.0.15:5601"
setup.kibana.ssl.enabled: true
setup.kibana.ssl.certificate_authorities: ["/etc/kibana/elasticsearch-ca.pem"]
setup.kibana.ssl.keystore.path: /etc/elasticsearch/elastic-certificates.p12
setup.kibana.ssl.truststore.path: /etc/elasticsearch/elastic-certificates.p12
setup.kibana.ssl.
setup.kibana.ssl.

#=======================================#

xpack.security.transport.ssl.enabled: true
xpack.security.transport.ssl.verification_mode: certificate
xpack.security.transport.ssl.keystore.path: /etc/elasticsearch/elastic-certificates.p12
xpack.security.transport.ssl.truststore.path: /etc/elasticsearch/elastic-certificates.p12
xpack.security.http.ssl.enabled: true
xpack.security.http.ssl.keystore.path: "http.p12"

xpack.security.enabled: true
xpack.security.transport.ssl.enabled: true
xpack.security.transport.ssl.verification_mode: certificate
xpack.security.transport.ssl.keystore.path: security/elastic-certificates.p12
xpack.security.transport.ssl.truststore.path: security/elastic-certificates.p12
xpack.security.http.ssl.enabled: true
xpack.security.http.ssl.keystore.path: /etc/elasticsearch/elastic-certificates.p12
xpack.security.http.ssl.truststore.path: /etc/elasticsearch/elastic-certificates.p12
xpack.security.http.ssl.verification_mode: certificate

### STEPS ###

1. created directory : /home/es/config/certs
2. copied certificates.p12 : cp /etc/elasticsearch/elastic-certificates.p12 /home/es/config/certs
3. copied HTTP certs to the same directory : cp /etc/elasticsearch/http.p12 /home/es/config/certs

4. For each additional Elastic product that you want to configure, copy the certificates to the relevant configuration directory. - ???
Does it include beats products? If it does where are "relevant" configuration directories? under /etc/..?

5. cp elasticsearch-ssl-http.zip /home/es/config/certs
6. unzip elasticsearch-ssl-http.zip
7. copy http.p12 to /etc/elasticsearch/
8. elasticsearch.yml :

xpack.security.transport.ssl.enabled: true
xpack.security.transport.ssl.verification_mode: certificate 
xpack.security.transport.ssl.keystore.path: /home/es/config/certs/elastic-certificates.p12 
xpack.security.transport.ssl.truststore.path: /home/es/config/certs/elastic-certificates.p12 
xpack.security.http.ssl.enabled: true
xpack.security.http.ssl.verification_mode: certificate
xpack.security.http.ssl.keystore.path: http.p12
xpack.security.http.ssl.truststore.path: http.p12

9. Update all clients, tools, and applications that connect to Elasticsearch 
to use the https protocol in their configuration URL. 
For example, Kibana, Beats, Logstash, language clients, and custom applications. 

- for me that is:
/etc/kibana/kibana.yml
/etc/filebeat/filebeat.yml      #protocol: "https" - for elasticsearch output
/etc/auditbeat/auditbeat.yml    #protocol: "https"
/etc/metricbeat/metricbeat.yml  #protocol: "https"
/etc/metricbeat/modules.d/lasticsearch-xpack.yml  #https
/etc/packetbeat/packetbeat.yml  #protocol: "https"

10. Encrypting traffic between the browser and Kibana.
https://www.elastic.co/guide/en/kibana/7.11/configuring-tls.html#configuring-tls-browser-kib


bin/elasticsearch-certutil cert -name sk1f_kibana -dns localhost,192.168.0.15
Certificates written to /usr/share/elasticsearch/sk1f_kibana.p12

Certificates written to /usr/share/elasticsearch/certificate-bundle.zip

/usr/share/elasticsearch/bin/elasticsearch-certutil cert -name sk1f_kibana -dns localhost,192.168.0.15 -pem   #here decided to use pem
cp /usr/share/elasticsearch/certificate-bundle.zip /home/es/config/certs/

11. cp /usr/share/elasticsearch/sk1f_kibana.p12 /home/es/config/certs/
sudo cp certificate-bundle.zip /home/es/config/certs/kibana-server/           #  -tried to use pem format in case if p12 not going to work

in kibana.yml : server.ssl.keystore.path: "/path/to/kibana-server.p12"

server.ssl.keystore.path: /etc/kibana/sk1f_kibana.p12
server.ssl.keystore.password: ""
server.ssl.enabled: true

elasticsearch.ssl.certificateAuthorities: ["/etc/kibana/elasticsearch-ca.pem"]

chown root.elasticsearch /home/es/config/certs/
chmod 660 /home/es/config/certs/

